printUsage = "false"
ocsp = "false"

if { "$1" equals "" } then {
  printUsage = "false"
} elif { "$1" equals "help" } then {
  printUsage = "true"
} elif { "$1" equals "ocsp" } then {
  ocsp = "true"
}

if { $printUsage equals "true" } then {
  echo "Usage: "
  echo ""
  echo "source file:./xipki/client-script/rest-client.script [help|ocsp]"
  echo "    help:      Print this usage"
  echo "    ocsp:      Also test the OCSP status"
} else {
HASH = SHA256
BASE_URL = https://localhost:8445/rest/myca

echo "#################################################################"
echo "#               Manage certificate via REST API                 #"
echo "#################################################################"

CUR_TIME = $(date '+%Y%m%d-%H%M%S')

OUT_DIR = output/rest-${CUR_TIME}

CACERT = ${OUT_DIR}/cacert.der

echo "# Get CA certificate"

xi:curl --out ${CACERT} $BASE_URL/cacert

xi:curl --out ${OUT_DIR}/cacerts.pem $BASE_URL/cacerts

CA_SHA1FP = $(xi:cert-info --fingerprint --hash SHA1 --in ${CACERT})

## Enroll certificate (profile smime)

echo "=====REST: Enroll====="

CN = rest-smime-${CUR_TIME}

xi:rsa-p12 --password 1234 --out ${OUT_DIR}/${CN}.p12 --subject "CN=${CN}"

xi:csr-p12 --hash $HASH --p12 ${OUT_DIR}/${CN}.p12 --password 1234 \
  --subject "C=DE,O=myorg,E=info@myorg.com,CN=${CN}" \
  --out ${OUT_DIR}/${CN}.csr

xi:curl --out ${OUT_DIR}/${CN}.der --data-file ${OUT_DIR}/${CN}.csr \
  --header "Content-Type: application/pkcs10" \
  "$BASE_URL/enroll-cert?profile=smime"

## Enroll certificate (profile tls)

echo "=====REST: Enroll (CA generates keypair)====="

CN = rest-tls-genkey-${CUR_TIME}

xi:curl --out ${OUT_DIR}/${CN}.pem \
  --data "subject=C=DE,O=myorg,CN=${CN}.myorg.org" \
  --header "Content-Type: text/plain; encoding=utf-8" \
  "$BASE_URL/enroll-serverkeygen?profile=tls"

echo "=====REST: Enroll====="

CN = rest-tls-${CUR_TIME}

xi:rsa-p12 --password 1234 --out ${OUT_DIR}/${CN}.p12 --subject "CN=${CN}"

xi:csr-p12 --hash $HASH --p12 ${OUT_DIR}/${CN}.p12 --password 1234 \
  --subject "C=DE,O=myorg,CN=${CN}.myorg.org" \
  --out ${OUT_DIR}/${CN}.csr

xi:curl --out ${OUT_DIR}/${CN}.der --data-file ${OUT_DIR}/${CN}.csr \
  --header "Content-Type: application/pkcs10" \
  "$BASE_URL/enroll-cert?profile=tls"

SERIAL = $(xi:cert-info --serial --hex --in ${OUT_DIR}/${CN}.der)

if { "$ocsp" equals "true" } then {
  echo "Current OCSP status"
  xi:ocsp-status --issuer ${CACERT} --cert ${OUT_DIR}/${CN}.der --verbose
}

echo "=====REST: Suspend====="

xi:curl "$BASE_URL/revoke-cert?ca-sha1=${CA_SHA1FP}&serial-number=${SERIAL}&reason=certificateHold"

if { "$ocsp" equals "true" } then {
  echo "Current OCSP status"
  xi:ocsp-status --issuer ${CACERT} --cert ${OUT_DIR}/${CN}.der --verbose
}

echo "=====REST: Unsuspend====="

xi:curl "$BASE_URL/unsuspend-cert?ca-sha1=${CA_SHA1FP}&serial-number=${SERIAL}"

if { "$ocsp" equals "true" } then {
  echo "Current OCSP status"
  xi:ocsp-status --issuer ${CACERT} --cert ${OUT_DIR}/${CN}.der --verbose
}

echo "=====REST: Revoke====="

xi:curl "$BASE_URL/revoke-cert?ca-sha1=${CA_SHA1FP}&serial-number=${SERIAL}&reason=keyCompromise"

if { "$ocsp" equals "true" } then {
  echo "Current OCSP Status"
  xi:ocsp-status --issuer ${CACERT} --cert ${OUT_DIR}/${CN}.der --verbose
}

echo "=====REST: Get CRL====="

xi:curl --out ${OUT_DIR}/rest-myca-get.crl $BASE_URL/crl

echo "=====REST: Enroll Chinese SM2 Twin TLS Certificates (CA generates all keypairs)====="

CN = rest-sm2-tls-twin-genkey-${CUR_TIME}

xi:curl --out ${OUT_DIR}/${CN}.pem \
  --data "subject=C=CN,O=myorg,CN=${CN}.myorg.org" \
  --header "Content-Type: text/plain; encoding=utf-8" \
  "$BASE_URL/enroll-serverkeygen-twin?profile=tls-sm2"

echo "=====REST: Enroll Chinese SM2 Twin TLS Certificates (CA generates only keypair for the encryption)====="

CN = rest-sm2-tls-twin-${CUR_TIME}

xi:sm2-p12 --password 1234 --out ${OUT_DIR}/${CN}.p12 --subject "CN=${CN}"

xi:csr-p12 --hash SM3 --gm --p12 ${OUT_DIR}/${CN}.p12 --password 1234 \
  --subject "C=CN,O=myorg,CN=${CN}.myorg.org" \
  --out ${OUT_DIR}/${CN}.csr

xi:curl --out ${OUT_DIR}/${CN}.pem --data-file ${OUT_DIR}/${CN}.csr \
  --header "Content-Type: application/pkcs10" \
  "$BASE_URL/enroll-cert-twin?profile=tls-sm2"

}
